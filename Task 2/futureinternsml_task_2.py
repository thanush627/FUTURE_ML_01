# -*- coding: utf-8 -*-
"""FutureInternsML Task-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jrciym2Bc1TOxBmZAh0qpEhkRBjPOIZ0
"""

pip install pandas numpy scikit-learn xgboost matplotlib seaborn openpyxl

import pandas as pd

df = pd.read_csv("/content/TelcoCustomerChurn.csv")

print(df.shape)
df.head()

df.drop('customerID', axis=1, inplace=True)

df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

df['TotalCharges'].fillna(df['TotalCharges'].median(), inplace=True)

df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})

cat_cols = df.select_dtypes(include=['object']).columns

df = pd.get_dummies(df, columns=cat_cols, drop_first=True)

df.head()

from sklearn.model_selection import train_test_split

X = df.drop('Churn', axis=1)
y = df['Churn']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier

log_reg = LogisticRegression(max_iter=1000)
rf = RandomForestClassifier()
xgb = XGBClassifier(use_label_encoder=False, eval_metric='logloss')

# Train
log_reg.fit(X_train, y_train)
rf.fit(X_train, y_train)
xgb.fit(X_train, y_train)

from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

def evaluate_model(model, name):
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:,1]
    print(f"ðŸ“Š Model: {name}")
    print(confusion_matrix(y_test, y_pred))
    print(classification_report(y_test, y_pred))
    print(f"ROC AUC: {roc_auc_score(y_test, y_proba)}\n")

evaluate_model(log_reg, "Logistic Regression")
evaluate_model(rf, "Random Forest")
evaluate_model(xgb, "XGBoost")

import matplotlib.pyplot as plt
import seaborn as sns

feature_importance = pd.Series(xgb.feature_importances_, index=X.columns)
feature_importance.nlargest(10).plot(kind='barh')
plt.title('Top 10 Important Features')
plt.show()

predictions = pd.DataFrame()
predictions['Churn_Probability'] = xgb.predict_proba(X_test)[:,1]
predictions['Actual'] = y_test.values
predictions['Predicted'] = xgb.predict(X_test)
predictions.head()

X_test_copy = X_test.copy()
X_test_copy['Churn_Probability'] = predictions['Churn_Probability']
X_test_copy['Actual'] = y_test.values
X_test_copy['Predicted'] = predictions['Predicted']

X_test_copy.to_excel("Churn_Prediction_Output.xlsx", index=False)

sns.countplot(x='Actual', data=predictions)
plt.title("Churn vs Non-Churn")
plt.show()